name: Build + Autotester (MacOS)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 23 * * *"

env:
    BUILD_TYPE: Debug
    CMAKE_DIR: ${{ github.workspace }}/Team19/Code19
    BUILD_DIR: ${{ github.workspace }}/Team19/Code19/build
    TEST_DIR: ${{ github.workspace }}/Team19/Code19/build/src/autotester
    AUTOTESTER_M1_DIR: ${{ github.workspace }}/Team19/Tests19/system_testing/m1
    AUTOTESTER_M2_DIR: ${{ github.workspace }}/Team19/Tests19/system_testing/m2

jobs:
  build_unit_mac:
    runs-on: macos-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        build-type: [Debug]
        cc-compilers: [clang]
        cxx-compilers: [clang++]

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory ${{ env.BUILD_DIR }}

      - name: Configure CMake
        shell: bash
        working-directory: ${{ env.BUILD_DIR }}
        run: cmake ${{ env.CMAKE_DIR }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}

      - name: Build Project
        shell: bash
        working-directory: ${{ env.BUILD_DIR }}
        env:
            CC: ${{ matrix.cc-compilers }}
            CXX: ${{ matrix.cxx-compilers }}
        run: |
            cmake --build . --config ${{ matrix.build-type }} -j 4
            cmake --build . --target autotester --config ${BUILD_TYPE} -j 4

      - name: Run Autotester on Milestone 1
        shell: bash
        working-directory: ${{ env.AUTOTESTER_M1_DIR }}
        run: |
            mkdir -p logs outputs
            echo "[System Test] Running all tests for Milestone 1"
            EXIT_CODE="0"

            for file in source/*_source.txt; do
                # shellcheck disable=SC2001
                test_name=$(echo "$file" | sed 's|.*/\(.*\)_source\.txt$|\1|') # regex generated with aid of ChatGPT
                echo "[System Test] Running Test: $test_name"
                ${{ env.TEST_DIR }}/autotester "$file" queries/"$test_name"_queries.txt outputs/"$test_name"_output.xml > logs/log_"$test_name".txt
                echo "[System Test] Test $test_name complete"
                if [ "$?" != 0 ]; then
                echo "[System Test] Test $test_name has failed"
                EXIT_CODE="1"
                else
                echo "[System Test] Test $test_name succeed"
                head -1 logs/log_"$test_name".txt
                FILENAME=outputs/"$test_name"_output.xml
                QUERIES=$(grep -o '</query>' "$FILENAME" | wc -l)
                PASSES=$(grep -o '<passed/>' "$FILENAME" | wc -l)
                FAILS=$(grep -c '</failed>' "$FILENAME" || echo "0")
                EXCEPTIONS=$(grep -c '<exception/>' "$FILENAME" || echo "0")
                echo "[System Test] Queries: $QUERIES; Passes: $PASSES; Fails: $FAILS; EXCEPTIONS: $EXCEPTIONS"
                if [ "$QUERIES" != "$PASSES" ]; then
                    echo "[Alert!] Some system tests have failed. Please try again!"
                    EXIT_CODE="2"
                fi
                fi
            done

            exit $EXIT_CODE


      - name: Run Autotester on Milestone 2
        shell: bash
        working-directory: ${{ env.AUTOTESTER_M2_DIR }}
        run: |
            mkdir -p logs outputs
            echo "[System Test] Running all tests for Milestone 1"
            EXIT_CODE="0"

            for file in source/*_source.txt; do
                # shellcheck disable=SC2001
                test_name=$(echo "$file" | sed 's|.*/\(.*\)_source\.txt$|\1|') # regex generated with aid of ChatGPT
                echo "[System Test] Running Test: $test_name"
                ${{ env.TEST_DIR }}/autotester "$file" queries/"$test_name"_queries.txt outputs/"$test_name"_output.xml > logs/log_"$test_name".txt
                echo "[System Test] Test $test_name complete"
                if [ "$?" != 0 ]; then
                echo "[System Test] Test $test_name has failed"
                EXIT_CODE="1"
                else
                echo "[System Test] Test $test_name succeed"
                head -1 logs/log_"$test_name".txt
                FILENAME=outputs/"$test_name"_output.xml
                QUERIES=$(grep -o '</query>' "$FILENAME" | wc -l)
                PASSES=$(grep -o '<passed/>' "$FILENAME" | wc -l)
                FAILS=$(grep -c '</failed>' "$FILENAME" || echo "0")
                EXCEPTIONS=$(grep -c '<exception/>' "$FILENAME" || echo "0")
                echo "[System Test] Queries: $QUERIES; Passes: $PASSES; Fails: $FAILS; EXCEPTIONS: $EXCEPTIONS"
                if [ "$QUERIES" != "$PASSES" ]; then
                    EXIT_CODE="2"
                fi
                fi
            done

            exit $EXIT_CODE


      - name: Cleanup Directory
        if: always()
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
